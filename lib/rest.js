var http=require("http"),https=require("https"),urlParser=require("url"),util=require("util"),events=require("events"),zlib=require("zlib");exports.Client=function(options){var self=this;self.options=options||{},self.useProxy=Boolean(self.options.proxy||false),self.useProxyTunnel=!self.useProxy||self.options.proxy.tunnel===undefined?false:self.options.proxy.tunnel,self.proxy=self.options.proxy,self.connection=self.options.connection||{},self.mimetypes=self.options.mimetypes||{};self.requestConfig=self.options.requestConfig||{};self.responseConfig=self.options.responseConfig||{};this.methods={};var ClientRequest=function(){events.EventEmitter.call(this);var _httpRequest};util.inherits(ClientRequest,events.EventEmitter);ClientRequest.prototype.end=function(){_httpRequest.end()};ClientRequest.prototype.setHttpRequest=function(req){_httpRequest=req};var Util={createProxyPath:function(url){var result=url.host;if(url.protocol==="https:"){result=url.host.indexOf(":")==-1?url.hostname+":443":url.host}return result},createProxyHeaders:function(url){var result={};if(self.proxy.user&&self.proxy.password){result["Proxy-Authorization"]="Basic "+new Buffer([self.proxy.user,self.proxy.password].join(":")).toString("base64")}if(!self.useProxyTunnel){result.host=url.host}return result},createConnectOptions:function(connectURL,connectMethod){debug("connect URL = ",connectURL);var url=urlParser.parse(connectURL),path,result={},protocol=url.protocol.indexOf(":")==-1?url.protocol:url.protocol.substring(0,url.protocol.indexOf(":")),defaultPort=protocol==="http"?80:443;result={host:url.host.indexOf(":")==-1?url.host:url.host.substring(0,url.host.indexOf(":")),port:url.port===undefined?defaultPort:url.port,path:url.path,protocol:protocol};if(self.useProxy){result.agent=false}if(self.options.user&&self.options.password){result.auth=[self.options.user,self.options.password].join(":")}else if(self.options.user&&!self.options.password){result.auth=self.options.user}if(self.useProxy){result.proxy={host:self.proxy.host,port:self.proxy.port,method:self.useProxyTunnel?"CONNECT":connectMethod,path:self.useProxyTunnel?this.createProxyPath(url):connectURL,headers:this.createProxyHeaders(url)}}if(self.connection&&typeof self.connection==="object"){for(var option in self.connection){result[option]=self.connection[option]}}if(!self.useProxyTunnel){for(option in result.proxy){result[option]=result.proxy[option]}delete result.proxy}result.requestConfig=self.requestConfig;result.responseConfig=self.responseConfig;return result},decodeQueryFromURL:function(connectURL){var url=urlParser.parse(connectURL),query=url.query.substring(1).split("&"),keyValue,result={};for(var i=0;i<query.length;i++){keyValue=query[i].split("=");result[keyValue[0]]=decodeURIComponent(keyValue[1])}return result},encodeQueryFromArgs:function(args){var result="?",counter=1;for(var key in args){var keyValue=key+"="+encodeURIComponent(args[key]);if(counter>1){keyValue="&".concat(keyValue)}result=result.concat(keyValue);counter++}return result},parsePathParameters:function(args,url){var result=url;if(!args||!args.path){return url}for(var placeholder in args.path){var regex=new RegExp("\\$\\{"+placeholder+"\\}","i");result=result.replace(regex,args.path[placeholder])}return result},overrideClientConfig:function(connectOptions,methodOptions){function validateReqResOptions(reqResOption){return reqResOption&&typeof reqResOption==="object"}if(validateReqResOptions(methodOptions.requestConfig)){util._extend(connectOptions.requestConfig,methodOptions.requestConfig)}if(validateReqResOptions(methodOptions.responseConfig)){util._extend(connectOptions.responseConfig,methodOptions.responseConfig)}},connect:function(method,url,args,callback,clientRequest){var options=this.createConnectOptions(this.parsePathParameters(args,url),method);options.method=method,options.clientRequest=clientRequest;debug("options pre connect",options);debug("args = ",args);debug("args.data = ",args!==undefined?args.data:undefined);if(typeof args==="function"){callback=args}else if(typeof args==="object"){if(args.headers){options.headers=args.headers}if(args.data!==undefined){options.data=args.data;if(options.headers===undefined){options.headers={}}options.headers["Content-Length"]=Buffer.byteLength(typeof args.data==="string"?args.data:JSON.stringify(args.data),"utf8")}if(args.parameters&&Object.keys(args.parameters).length>0){options.path+=options.path.charAt(url.length-1)==="?"?"?":"";options.path=options.path.concat(Util.encodeQueryFromArgs(args.parameters));debug("options.path after request parameters = ",options.path)}this.overrideClientConfig(options,args)}debug("FINAL SELF object  ====>",self);if(self.useProxy&&self.useProxyTunnel){ConnectManager.proxy(options,callback)}else{ConnectManager.normal(options,callback)}},mergeMimeTypes:function(mimetypes){if(mimetypes&&typeof mimetypes==="object"){if(mimetypes.json&&mimetypes.json instanceof Array&&mimetypes.json.length>0){ConnectManager.jsonctype=mimetypes.json}else if(mimetypes.xml&&mimetypes.xml instanceof Array&&mimetypes.xml.length>0){ConnectManager.xmlctype=mimetypes.xml}}}},Method=function(url,method){var httpMethod=self[method.toLowerCase()];return function(args,callback){var completeURL=url;if(typeof args==="function"){callback=args;args={}}else if(typeof args==="object"){if(args.parameters&&Object.keys(args.parameters).length>0){url+=url.charAt(url.length-1)==="?"?"?":"";completeURL=url.concat(Util.encodeQueryFromArgs(args.parameters));delete args.parameters}}return httpMethod(completeURL,args,callback)}};this.get=function(url,args,callback){var clientRequest=new ClientRequest;Util.connect("GET",url,args,callback,clientRequest);return clientRequest};this.post=function(url,args,callback){var clientRequest=new ClientRequest;Util.connect("POST",url,args,callback,clientRequest);return clientRequest};this.put=function(url,args,callback){var clientRequest=new ClientRequest;Util.connect("PUT",url,args,callback,clientRequest);return clientRequest};this.delete=function(url,args,callback){var clientRequest=new ClientRequest;Util.connect("DELETE",url,args,callback,clientRequest);return clientRequest};this.patch=function(url,args,callback){var clientRequest=new ClientRequest;Util.connect("PATCH",url,args,callback,clientRequest);return clientRequest};this.registerMethod=function(name,url,method){this.methods[name]=new Method(url,method)};this.unregisterMethod=function(name){delete this.methods[name]};ConnectManager.on("error",function(err){self.emit("error",err)});Util.mergeMimeTypes(self.mimetypes);debug("ConnectManager",ConnectManager)};var ConnectManager={xmlctype:["application/xml","application/xml;charset=utf-8"],jsonctype:["application/json","application/json;charset=utf-8"],isXML:function(content){var result=false;if(!content){return result}for(var i=0;i<this.xmlctype.length;i++){result=this.xmlctype[i].toLowerCase()===content.toLowerCase();if(result){break}}return result},isJSON:function(content){var result=false;if(!content){return result}for(var i=0;i<this.jsonctype.length;i++){result=this.jsonctype[i].toLowerCase()===content.toLowerCase();if(result){break}}return result},isValidData:function(data){return data!==undefined&&(data.length!==undefined&&data.length>0)},configureRequest:function(req,config,clientRequest){if(config.timeout){req.setTimeout(config.timeout,function(){clientRequest.emit("requestTimeout",req)})}if(config.noDelay){req.setNoDelay(config.noDelay)}if(config.keepAlive){req.setSocketKeepAlive(config.noDelay,config.keepAliveDelay||0)}},configureResponse:function(res,config,clientRequest){if(config.timeout){res.setTimeout(config.timeout,function(){clientRequest.emit("responseTimeout",res);res.close()})}},handleEnd:function(res,buffer,callback){var self=this,content=res.headers["content-type"],encoding=res.headers["content-encoding"];debug("content-type: ",content);debug("content-encoding: ",encoding);if(encoding!==undefined&&encoding.indexOf("gzip")>=0){debug("gunzip");zlib.gunzip(Buffer.concat(buffer),function(er,gunzipped){self.handleResponse(res,gunzipped,callback)})}else if(encoding!==undefined&&encoding.indexOf("deflate")>=0){debug("inflate");zlib.inflate(Buffer.concat(buffer),function(er,inflated){self.handleResponse(res,inflated,callback)})}else{debug("not compressed");self.handleResponse(res,Buffer.concat(buffer).toString(),callback)}},handleResponse:function(res,data,callback){var content=res.headers["content-type"];debug("response content is ",content);if(this.isJSON(content)){var jsonData;try{jsonData=this.isValidData(data)?JSON.parse(data):data}catch(err){jsonData="Error parsing response. response: ["+data+"], error: ["+err+"]"}callback(jsonData,res)}else{callback(data,res)}},prepareData:function(data){var result;if(data instanceof Buffer||typeof data!=="object"){result=data}else{result=JSON.stringify(data)}return result},proxy:function(options,callback){debug("proxy options",options.proxy);var proxyTunnel=http.request(options.proxy),self=this;proxyTunnel.on("connect",function(res,socket,head){debug("proxy connected",socket);options.socket=socket;var buffer=[],protocol=options.protocol=="http"?http:https,clientRequest=options.clientRequest,requestConfig=options.requestConfig,responseConfig=options.responseConfig;delete options.protocol;delete options.clientRequest;delete options.requestConfig;delete options.responseConfig;clientRequest.options=options;var request=protocol.request(options,function(res){self.configureResponse(res,responseConfig,clientRequest);res.on("data",function(chunk){buffer.push(new Buffer(chunk))});res.on("end",function(){self.handleEnd(res,buffer,callback)});res.on("error",function(err){if(clientRequest!==undefined&&typeof clientRequest==="object"){err.request=clientRequest;err.response=res;clientRequest.emit("error",err)}else{self.emit("error",err)}})});self.configureRequest(request,requestConfig,clientRequest);clientRequest.setHttpRequest(request);if(options.data){request.write(this.prepareData(options.data))}request.on("error",function(err){if(clientRequest!==undefined&&typeof clientRequest==="object"){err.request=clientRequest;clientRequest.emit("error",err)}else{self.emit("error",err)}});request.end()});proxyTunnel.on("error",function(e){self.emit("error",e)});proxyTunnel.end()},normal:function(options,callback){var buffer=[],protocol=options.protocol==="http"?http:https,clientRequest=options.clientRequest,requestConfig=options.requestConfig,responseConfig=options.responseConfig,self=this;delete options.protocol;delete options.clientRequest;delete options.requestConfig;delete options.responseConfig;debug("options pre connect",options);clientRequest.options=options;var request=protocol.request(options,function(res){self.configureResponse(res,responseConfig,clientRequest);res.on("data",function(chunk){buffer.push(new Buffer(chunk))});res.on("end",function(){self.handleEnd(res,buffer,callback)});res.on("error",function(err){if(clientRequest!==undefined&&typeof clientRequest==="object"){err.request=clientRequest;err.response=res;clientRequest.emit("error",err)}else{self.emit("error",err)}})});self.configureRequest(request,requestConfig,clientRequest);debug("clientRequest",clientRequest);clientRequest.setHttpRequest(request);request.on("error",function(err){debug("request error",clientRequest);if(clientRequest!==undefined&&typeof clientRequest==="object"){err.request=clientRequest;clientRequest.emit("error",err)}else{self.emit("error",err)}});debug("options data",options.data);if(options.data){request.write(this.prepareData(options.data))}request.end()}};util.inherits(exports.Client,events.EventEmitter);util._extend(ConnectManager,events.EventEmitter.prototype);var debug=function(){if(!process.env.DEBUG){return}var now=new Date,header=now.getHours()+":"+now.getMinutes()+":"+now.getSeconds()+" [NRC CLIENT]"+arguments.callee.caller.name+" -> ",args=Array.prototype.slice.call(arguments);args.splice(0,0,header);console.log(...args)};
