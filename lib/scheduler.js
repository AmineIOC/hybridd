var functions=require("./functions");var initproc=function initproc(processID,properties){var sessionID=1;if(typeof properties!=="undefined"){if(typeof properties.subprocesses!=="undefined"){global.hybridd.procqueue[processID]=properties.subprocesses}if(typeof properties.sessionID!=="undefined"){sessionID=properties.sessionID}}if(processID===0){var suffix=`000${Math.random()*999}`.slice(-3);processID=Date.now()+suffix.toString()}global.hybridd.proc[processID]={};global.hybridd.proc[processID].err=0;global.hybridd.proc[processID].busy=null;global.hybridd.proc[processID].step=null;global.hybridd.proc[processID].steps=null;global.hybridd.proc[processID].subproc=null;global.hybridd.proc[processID].progress=0;global.hybridd.proc[processID].autoprog=true;global.hybridd.proc[processID].timeout=null;global.hybridd.proc[processID].started=Date.now();global.hybridd.proc[processID].stopped=null;global.hybridd.proc[processID].request=null;global.hybridd.proc[processID].data=null;if(processID.indexOf(".",15)===-1){global.hybridd.proc[processID].sid=sessionID;global.hybridd.proc[processID].vars={}}return processID};var stopproc=function stopproc(processID,properties){if(typeof properties==="undefined"){properties={}}try{if(global.hybridd.proc[processID].stopped===null){global.hybridd.proc[processID].err=typeof properties.err==="undefined"?0:properties.err;global.hybridd.proc[processID].data=typeof properties.data==="undefined"?null:properties.data;global.hybridd.proc[processID].progress=1;global.hybridd.proc[processID].stopped=Date.now()}else{if(DEBUG){console.log(` [D] (${processID}) process was already stopped`)}}}catch(result){if(DEBUG){console.log(` [D] process ${processID} no longer exists, or cannot be stopped`)}}return 1};var evaluate=function evaluate(runprocess,p,err,data){return new Function("p","err","data",`\n\n      // process ID decomposition\n      var procpart = function procpart (processID) {\n        var procsplit = processID.split(".");\n        var pieces = {};\n        var procinfo = [];\n        procinfo[0] = "";\n        // store parent in first element\n        for (var i = 0; i < procsplit.length - 1; i += 1) {\n            pieces[i] = procsplit[i];\n        }\n        procinfo[0] = functions.implode(".", pieces);\n        // store child in next element\n        procinfo[1] = procsplit[procsplit.length - 1];\n        // store previous child in next element\n        if (procinfo[1] - 1 > -1) {\n            procinfo[2] = procinfo[0]+"."+(procinfo[1]-1);\n        } else {\n            procinfo[2] = procinfo[0];\n        }\n        return procinfo;\n      }\n\n      // call an external module function\n      function func(p,module,funcname,funcdata,data) {\n        if(DEBUG) { console.log(" [D] ("+p.parentID+") function call to module "+module+" -> "+funcname); }  \n        if(typeof funcdata != "object") { funcdata = {}; }\n        funcdata.processID = p.processID;\n        return ( new Function("modules.module."+module+".main."+funcname+"("+JSON.stringify(funcdata)+");") )();\n      }\n\n      // go to next step\n      function next(p,err,data) {\n        global.hybridd.proc[p.processID].err = (typeof err === "undefined"?1:err);\n        global.hybridd.proc[p.processID].busy = false;\n        global.hybridd.proc[p.processID].progress = 1;\n        global.hybridd.proc[p.processID].stopped = Date.now();\n        global.hybridd.proc[p.processID].data = (typeof data != "undefined"?data:"[next]");\n        return true;\n      }\n\n      // dump information to the console\n      function dump(p,data) {\n        console.log("[D] ("+p.parentID+") dump: "+JSON.stringify(data));\n        return next(p,0,data);\n      }\n\n      // wait a specified amount of time\n      function wait(p,millisecs,data) {\n        if(DEBUG) { console.log(" [D] ("+p.parentID+") waiting at "+(global.hybridd.proc[p.parentID].step+1)+" of "+(global.hybridd.proc[p.parentID].steps+1)); }\n        if(typeof data === "undefined") { data = "[wait "+millisecs+"]"; }\n        if(global.hybridd.proc[p.parentID].timeout>0 && millisecs < global.hybridd.proc[p.parentID].timeout && global.hybridd.proc[p.parentID].timeout != -1) {\n          global.hybridd.proc[p.parentID].timeout = global.hybridd.proc[p.parentID].timeout + millisecs;\n        }\n        if(global.hybridd.proc[p.processID].timeout>0 && millisecs < global.hybridd.proc[p.processID].timeout && global.hybridd.proc[p.processID].timeout != -1) {\n          global.hybridd.proc[p.processID].timeout = global.hybridd.proc[p.processID].timeout + millisecs;\n        }\n        return setTimeout(function(p,data) {\n          next(p,0,data);\n        },millisecs,p,data);\n      }\n\n      // wait for a process to finish, and store its processID\n      function prwt(p,processID) {\n        var millisecs = 500;\n        if(typeof global.hybridd.proc[processID] != "undefined") {\n          if(global.hybridd.proc[processID].progress >= 1 || global.hybridd.proc[processID].stopped > 1) {\n            next(p,global.hybridd.proc[processID].err,{processID:processID});\n          } else {\n            setTimeout(function(p,processID) {\n              prwt(p,processID);\n            },millisecs,p,processID);\n          }\n          if(DEBUG) { console.log(" [D] ("+p.parentID+") processwait at "+(global.hybridd.proc[p.parentID].step+1)+" of "+(global.hybridd.proc[p.parentID].steps+1)); }\n        }\n        return 1;\n      }\n\n      // collate data from previous subprocess steps\n      function coll(p,steps) {\n        if(DEBUG) { console.log(" [D] ("+p.parentID+") collating subprocess data for "+steps+" steps"); }  \n        if(typeof steps === "undefined" || steps === 0) { steps = global.hybridd.proc[p.parentID].step; } // default: collate all previous steps\n        if(steps>global.hybridd.proc[p.parentID].step) { steps = global.hybridd.proc[p.parentID].step; } // avoid reads beyond the first processID\n        var data = [];\n        for(var i=global.hybridd.proc[p.parentID].step-steps; i<global.hybridd.proc[p.parentID].step; i+=1) {\n          data.push( global.hybridd.proc[p.parentID+"."+i].data );\n        }\n        return next(p,0,data);\n      }\n\n      // logs data to parent process\n      function logs(p,level,log,data) {\n        // if(DEBUG) { console.log(' [D] ('+p.parentID+') '+level+' : '+log); } else { \n        console.log(" ["+(level==2?"!":(level==1?"i":"."))+"] "+log);\n        if(typeof data === "undefined") { data = "[logs]"; }\n        return next(p,0,data);\n      }\n\n      // pass data to parent process\n      function pass(p,data) {\n        if(DEBUG) { console.log(" [D] ("+p.parentID+") passing subprocess data to parent process"); }  \n        if(typeof data === "undefined") { data = "[pass]"; }\n        global.hybridd.proc[p.parentID].data = data;\n        return next(p,0,data);\n      }\n\n      // force set progress of parent process\n      function prog(p,step,steps,data) {\n        if(DEBUG) { console.log(" [D] ("+p.parentID+") progress reset to "+step+" of "+steps); }\n        if(typeof steps === "undefined") { steps = 1; }\n        if(typeof data === "undefined") { data = "[prog "+step+"/"+steps+"]"; }\n        if(step === -1) {\n          global.hybridd.proc[p.parentID].autoprog = true;\n        } else {\n          global.hybridd.proc[p.parentID].progress=step/steps;\n          global.hybridd.proc[p.parentID].autoprog = false;\n        }\n        return next(p,0,data);\n      }\n\n      // force set timeout of current process\n      function time(p,millisecs,data) {\n        if(DEBUG) { console.log(" [D] ("+p.parentID+") timeout for process forced to "+(millisecs?millisecs+"ms":"indefinite")); }\n        if(typeof data === "undefined") { data = "[time "+millisecs+"]"; }\n        // increase timeout of all siblings\n        var loopid;\n        for(var i=global.hybridd.proc[p.parentID].step; i<=global.hybridd.proc[p.parentID].steps; i+=1) {\n          loopid = p.parentID+"."+i;\n          if(global.hybridd.proc[loopid].timeout<millisecs || millisecs<=0) {\n            global.hybridd.proc[loopid].timeout = millisecs;\n          }\n        }  \n        // increase timeout of all parents\n        var parentID = true;\n        var processID = p.processID;\n        while (parentID) {\n          var procinfo = procpart(processID);\n          if(procinfo[1]>-1) { parentID = procinfo[0]; processID = parentID; } else { parentID = false; }\n          if(parentID) {\n            // DEBUG: console.log(' [#] setting timeout of parentID '+parentID);\n            if(global.hybridd.proc[parentID].timeout<millisecs || millisecs<=0) {\n              global.hybridd.proc[parentID].timeout = millisecs;\n            }\n          }\n        }\n        return next(p,0,data);\n      }\n\n      // stop processing and return data\n      function stop(p,err,data) {\n        global.hybridd.proc[p.processID].busy = false;\n        global.hybridd.proc[p.processID].err = (typeof err === "undefined"?1:err);\n        global.hybridd.proc[p.processID].progress = 1;\n        global.hybridd.proc[p.processID].stopped = Date.now();\n        global.hybridd.proc[p.processID].data = (typeof data != "undefined"?data:"[stop]");\n        global.hybridd.proc[p.parentID].busy = false;\n        global.hybridd.proc[p.parentID].err = (typeof err === "undefined"?1:err);\n        global.hybridd.proc[p.parentID].progress = 1;\n        global.hybridd.proc[p.parentID].stopped = Date.now();\n        global.hybridd.proc[p.parentID].data = (typeof data != "undefined"?data:"[stop]");\n        if(DEBUG) { console.log(" [D] ("+p.parentID+") stopped at step "+(global.hybridd.proc[p.parentID].step<=global.hybridd.proc[p.parentID].steps?global.hybridd.proc[p.parentID].step+1:1)+" of "+(global.hybridd.proc[p.parentID].steps+1)); }\n        return 1;\n      }\n\n      // jump forward or backward X instructions\n      var jump = function(p,stepto,data) {\n        if(typeof data === "undefined") { data = "[jump "+stepto+"]"; }\n        global.hybridd.proc[p.processID].started = Date.now();\n        if(stepto === 0) { stepto = 1; }\n        if(stepto < 0) {\n          var previd;\n          for(var i=global.hybridd.proc[p.parentID].step+stepto; i<global.hybridd.proc[p.parentID].step; i+=1) {\n            previd = p.parentID+"."+i;\n            global.hybridd.proc[previd].err = 0;\n            global.hybridd.proc[previd].busy = false;\n            global.hybridd.proc[previd].progress = 0;\n            global.hybridd.proc[previd].started = Date.now();\n            global.hybridd.proc[previd].stopped = null;\t\t\t\n          }\n        }\n        global.hybridd.proc[p.parentID].busy = false;\n        global.hybridd.proc[p.parentID].step = global.hybridd.proc[p.parentID].step+stepto;\n        global.hybridd.proc[p.processID].err = 0;\n        global.hybridd.proc[p.processID].busy = false;\n        global.hybridd.proc[p.processID].progress = 1;\n        global.hybridd.proc[p.processID].data = data;\n        if(DEBUG) { console.log(" [D] ("+p.parentID+") jumping to step "+(global.hybridd.proc[p.parentID].step+1)+" of "+(global.hybridd.proc[p.parentID].steps+1)); }\n        global.hybridd.proc[p.processID].stopped = Date.now();\n        return "step = step+"+stepto+";";\n      };\n\n      // test a condition and choose to jump\n      function test(p,condition,is_true,is_false,data) {\n        if(DEBUG) { console.log(" [D] ("+p.parentID+") testing ["+condition+"] in step "+(global.hybridd.proc[p.parentID].step+1)+" of "+(global.hybridd.proc[p.parentID].steps+1)); }\n        if(condition) {\n          if(typeof data === "undefined") { data = "[test T "+is_true+"]"; }\n          jump(p,is_true,data);\n        } else if(typeof is_false === "undefined") {\n            if(typeof data === "undefined") { data = "[test F 1]"; }\n            next(p,0,data);\n          } else {\n            if(typeof data === "undefined") { data = "[test F "+is_false+"]"; }\n            jump(p,is_false,data);\n          }\n        return 1;\n      }\n\n      function poke(p,variable,pokedata,data) {\n        // DEBUG: console.log('POKE: '+JSON.stringify(pokedata));\n        if(typeof data === "undefined") { data = "[poke]"; }\n        if(DEBUG) { console.log(" [D] ("+p.parentID+") poke ["+JSON.stringify(variable)+"] in step "+(global.hybridd.proc[p.parentID].step+1)+" of "+(global.hybridd.proc[p.parentID].steps+1)); }\n        // get root parent\n        var rootID=p.processID.substring( 0,p.processID.indexOf(".") );\n        // store poke data in root process\n        global.hybridd.proc[rootID].vars[variable] = pokedata;\n        next(p,0,data);\n        return 1;\n      }\n\n      // peek at a variable\n      var peek = function(p,variable) {\n        if(DEBUG) { console.log(" [D] ("+p.parentID+") peek ["+JSON.stringify(variable)+"] in step "+(global.hybridd.proc[p.parentID].step+1)+" of "+(global.hybridd.proc[p.parentID].steps+1)); }\n        // get root parent\n        var rootID=p.processID.substring( 0,p.processID.indexOf(".") );\n        // DEBUG: console.log('PEEK: '+rootID);\n        // set data to what is peeked\n        var data = null;\n        if(typeof global.hybridd.proc[rootID].vars != "undefined") {\n          if(typeof global.hybridd.proc[rootID].vars[variable] != "undefined") {\n            data = global.hybridd.proc[rootID].vars[variable];\n          }\n        }\n        return data;\n      }\n\n    ${runprocess}`)(p,err,data)};var seqstep=function seqstep(processID,subprocesses,step){if(global.hybridd.proc[processID].busy===true){if(global.hybridd.proc[`${processID}.${step}`].progress===1){if(DEBUG){console.log(` [D] (${processID}) finished step ${step+1} of ${global.hybridd.proc[processID].steps+1}`)}if(global.hybridd.proc[processID].autoprog===true){global.hybridd.proc[processID].progress=global.hybridd.proc[processID].step/global.hybridd.proc[processID].steps}global.hybridd.proc[processID].busy=false;if(global.hybridd.proc[processID].progress===1){global.hybridd.proc[processID].stopped=Date.now()}else{global.hybridd.proc[processID].step+=1}if(step===global.hybridd.proc[processID].steps){var prevID=global.hybridd.proc[processID].subproc;var data=null,err=null;if(typeof global.hybridd.proc[prevID]!=="undefined"){err=typeof global.hybridd.proc[prevID].err==="undefined"?1:global.hybridd.proc[prevID].err;data=typeof global.hybridd.proc[prevID].data==="undefined"?null:global.hybridd.proc[prevID].data}var p={parentID:processID,processID:`${processID}.${step}`};evaluate("stop(p,err,data);",p,err,data)}}else if(global.hybridd.proc[processID].autoprog===true){if(global.hybridd.proc[`${processID}.${step}`].steps>0){global.hybridd.proc[processID].progress=(global.hybridd.proc[processID].step-1)/global.hybridd.proc[processID].steps+1/global.hybridd.proc[processID].steps*global.hybridd.proc[`${processID}.${step}`].progress}}setTimeout(()=>{if(typeof global.hybridd.proc[processID]!=="undefined"){if(typeof global.hybridd.proc[processID].step!=="undefined"){seqstep(processID,subprocesses,global.hybridd.proc[processID].step)}}},200)}else if(global.hybridd.proc[processID].busy!==true&&global.hybridd.proc[processID].stopped===null&&global.hybridd.proc[processID].step<=global.hybridd.proc[processID].steps){global.hybridd.proc[processID].busy=true;if(DEBUG){console.log(` [D] (${processID}) running step ${step+1} of ${global.hybridd.proc[processID].steps+1}`)}prevID=global.hybridd.proc[processID].subproc;if(typeof global.hybridd.proc[prevID]!=="undefined"){err=typeof global.hybridd.proc[prevID].err!=="undefined"?global.hybridd.proc[prevID].err:1;data=typeof global.hybridd.proc[prevID].data!=="undefined"?global.hybridd.proc[prevID].data:null}else{err=null;data=null}var subinsert=`{parentID:"${processID}",processID:"${processID}.${step}"}`;var runprocess=subprocesses[step].replace(/peek\(/g,`peek(${subinsert},`);if(["coll","dump","func","jump","logs","next","pass","poke","prog","prwt","stop","test","time","wait"].indexOf(subprocesses[step].substr(0,4))>-1){runprocess=`${runprocess.slice(0,5)+subinsert},${runprocess.slice(5)}`}global.hybridd.proc[processID].subproc=`${processID}.${step}`;try{evaluate(runprocess,p,err,data)}catch(result){console.log(` [!] (${processID}) proc error: \n     ${runprocess}\n     ${result?result:"UNKNOWN ERROR!"}`)}setTimeout(()=>{seqstep(processID,subprocesses,global.hybridd.proc[processID].step)},200)}return 1};var seqproc=function seqproc(processID,subprocesses){global.hybridd.proc[processID].step=0;global.hybridd.proc[processID].steps=subprocesses.length-1;global.hybridd.proc[processID].busy=false;if(DEBUG){console.log(` [D] (${processID}) initializing sequence processing for ${global.hybridd.proc[processID].steps+1} steps...`)}for(var step=0;step<subprocesses.length;step+=1){initproc(`${processID}.${step}`);subprocesses[step]=subprocesses[step].replace(`"processID":"${processID}"`,`"processID":"${processID}.${step}"`);global.hybridd.proc[`${processID}.${step}`].request=subprocesses[step]}return seqstep(processID,subprocesses,0)};var subqueue=function subqueue(processID,subprocesses){var result=true;var sessionID=1;if(typeof subprocesses!=="undefined"){if(subprocesses.length>-1){if(DEBUG){console.log(` [D] adding ${processID} to processing queue`)}if(typeof global.hybridd.proc[processID]!=="undefined"&&typeof global.hybridd.proc[processID].sid!=="undefined"){sessionID=global.hybridd.proc[processID].sid}initproc(processID,{sessionID:sessionID,subprocesses:subprocesses});result=false}}return result};var initialize=function initialize(){setInterval(()=>{for(var processID in global.hybridd.procqueue){if(DEBUG){console.log(` [D] processing engine creating process ${processID}`)}seqproc(processID,global.hybridd.procqueue[processID]);delete global.hybridd.procqueue[processID]}},50);return setInterval(()=>{var procpurgetime=60;for(var processID in global.hybridd.proc){if({}.hasOwnProperty.call(global.hybridd.proc,processID)){var proctimeout=global.hybridd.proc[processID].timeout===null?15e3:global.hybridd.proc[processID].timeout;if(typeof global.hybridd.proc[processID]!=="undefined"){if(proctimeout>0&&global.hybridd.proc[processID].started<Date.now()-procpurgetime*1e3){if(DEBUG){console.log(` [D] processing engine purging process ${processID}`)}delete global.hybridd.proc[processID]}else{if(proctimeout>0&&(global.hybridd.proc[processID].stopped===null&&global.hybridd.proc[processID].started<Date.now()-proctimeout)){if(DEBUG){console.log(` [D] process ${processID} has timed out`)}global.hybridd.proc[processID].err=1;global.hybridd.proc[processID].info="Process timeout!";global.hybridd.proc[processID].busy=false;global.hybridd.proc[processID].stopped=Date.now()}}}}}},1e3)};exports.initialize=initialize;exports.init=initproc;exports.stop=stopproc;exports.fire=subqueue;
